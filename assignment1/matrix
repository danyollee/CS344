#!/bin/bash -e

#Reading the dimensions of the matrix
#$1 is the file, $2 is the amount of command line args
findDims(){
  if [[ $2 -gt 2 ]]
  then
    echo "Error, too many arguments" >&2
    exit 1
  fi
  numRows=$(cat $1 | wc -l)
  numCols=$(head -2 $1 |tail -1 |tr '\t' '\n' |wc -l)

  echo "$numRows $numCols"

  return 0
}

#Transposing the matrix
transpose(){
  transposedMatrix="matrixTrans$$"
  numRows=$(cat $1 | wc -l)
  numCols=$(head -2 $1 |tail -1 |tr '\t' '\n' |wc -l)

  for ((i=1; i<="$numCols"; i++))
  do
    echo "$(cut -f"$i" $1 | paste -s)" >> $transposedMatrix
  done
}

#Finding the mean. Takes in MxN matrix and returns 1xN row
# where the first element is the mean of column one, the second
# element is the mean of column two, and so on
getMean(){
  numRows=$(cat $1 | wc -l)
  numCols=$(head -2 $1 |tail -1 |tr '\t' '\n' |wc -l)
  matrixMean="matrixMean$$"
  temp="temp$$"
  counter=0

  transpose $1
  printf "$(tr -s '\t' < $transposedMatrix | tr '\t' ' ' > $temp)"

  while read i
  do
    counter=$((counter + 1))
    sum=0
    avg=0
    for num in $i
    do
      sum=$(($sum + $num))
    done
    avg=$(( ($sum + ($numRows/2)*( ($sum>0)*2-1 )) / $numRows))
    printf "%s" "$avg" >> $matrixMean
    if [[ $counter -lt $numCols ]]
    then
      printf "\t" >> $matrixMean
    fi
  done < $temp

  echo "" >> $matrixMean
  printf "$(rm -f $transposedMatrix)"
  printf "$(rm -f $temp)"

  return 0
}

add(){
  numRows=$(cat $1 | wc -l)
  numCols=$(head -2 $1 |tail -1 |tr '\t' '\n' |wc -l)

  numRows2=$(cat $2 | wc -l)
  numCols2=$(head -2 $2 |tail -1 |tr '\t' '\n' |wc -l)
  temp1="temp1$$"
  temp2="temp2$$"
  addMatrix="addMatrix$$"

  total=$(( $numRows*$numCols ))

  #Checks to see if the matrix are the same size
  if [ "$numRows" -ne "$numRows2" ] || [ "$numCols" -ne "$numCols2" ]
  then
    echo "Error, matrices are not the same dimensions" >&2
    exit 1
  fi

  printf "$(tr -s '\t' < $1 | tr '\t' ' ' > $temp1)"
  printf "$(tr -s '\t' < $2 | tr '\t' ' ' > $temp2)"


  sum=0

  arr1=()
  arr2=()

  while read line1 <&3 && read line2 <&4
  do
    for num in $line1
    do
      arr1+=("$num")
    done
    for num in $line2
    do
      arr2+=("$num")
    done
  done 3<$temp1 4<$temp2

  for ((i=0; i<$total; i++))
  do
    if [[ $i -gt 0 ]] && [[ $i%$numCols -ne 0 ]]
    then
      printf "\t" >> $addMatrix
    fi
    if [[ $i%$numCols -eq 0 ]] && [[ $i -ne 0 ]]
    then
      printf "\n" >> $addMatrix
    fi
    sum=0
    sum=$(( ${arr1[$i]}+${arr2[$i]} ))
    printf "%s" "$sum" >> $addMatrix
  done

  printf "\n" >> $addMatrix
  printf "$(rm -f $temp1)"
  printf "$(rm -f $temp2)"
}

multiply(){
  numRows=$(cat $1 | wc -l)
  numCols=$(head -2 $1 |tail -1 |tr '\t' '\n' |wc -l)

  numRows2=$(cat $2 | wc -l)
  numCols2=$(head -2 $2 |tail -1 |tr '\t' '\n' |wc -l)

  if [[ $numCols -ne $numRows2 ]]
  then
    echo "Error, matrices are not compatible to multiply together." >&2
    exit 1
  fi

  multMatrix="multMatrix$$"

  v1=0
  v2=0
  v3=0
  sum=0

  for ((i=1; i<=$numRows; i++))
  do
    for ((j=1; j<=$numCols2; j++))
    do
      sum=0
      for ((k=1; k<=$numCols; k++))
      do
        v1=$(cat $1 | cut -f $k | head -n $i | tail -n 1)
        v2=$(cat $2 | cut -f $j | head -n $k | tail -n 1)
        v3=$((v1*v2))
        sum=$(($sum + $v3))
        if [[ $k -eq $numCols ]]
        then
          printf "%s" "$sum" >> $multMatrix
        fi
      done
      if [[ $j%$numCols2 -ne 0 ]]
      then
        mod=$(($k%$numCols))
        printf "\t" >> $multMatrix
      fi
    done
    printf "\n" >> $multMatrix
  done

}

#Prints the matrix out in a visual manner to the console
printMatrix(){
  echo "function"
  while IFS= read -r line
  do
    echo "$line"
  done < $1

  # printf "$(rm -f $1)"
}


#Reading in command line arguments
#Remember that '$#' is the number of arguments passed to the script
commandLine=$#
file=$2 #Takes in which file to read from
file2=$3

if [ "$1" == "dims" ]
then
  findDims $2 $#
elif [ "$1" == "transpose" ]
then
  if [[ $# -ne 2 ]]
  then
    file=$(cat)
    echo "$file"
  fi
  transpose $file
  printMatrix $transposedMatrix
elif [ "$1" == "mean" ]
then
  getMean $2
  printMatrix $matrixMean
fi

if [ "$1" == "add" ] || [ "$1" == "multiply" ] && [ $commandLine -ne 3 ]
then
  echo "Error, invalid amount of arguments" >&2
  exit 1
else
  if [ "$1" == "add" ]
  then
    add $2 $3
    printMatrix $addMatrix
  elif [ "$1" == "multiply" ]
  then
    # echo -e "file: $file\tfile2: $file2"
    multiply $2 $3
    printMatrix $multMatrix
  fi
fi

printf "$(rm -f temp"$$"*)"
